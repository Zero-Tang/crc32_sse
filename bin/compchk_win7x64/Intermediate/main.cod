; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	crc_table
_DATA	SEGMENT
crc_table DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
$SG4382	DB	'Example input', 00H
	ORG $+2
$SG4383	DB	'Type "exit" to leave program!', 0aH, 00H
	ORG $+1
$SG4384	DB	'Example CRC32 hash of string "Example input"', 0aH, 00H
	ORG $+2
$SG4388	DB	'exit', 00H
	ORG $+3
$SG4392	DB	'Result by Non-Optimized: 0x%X', 0aH, 00H
	ORG $+1
$SG4393	DB	'Result by SSE-Optimized: 0x%X', 0aH, 00H
	ORG $+1
$SG4394	DB	'Input string to hash: ', 00H
	ORG $+1
$SG4395	DB	'%s', 00H
	ORG $+1
$SG4396	DB	'pause', 00H
_DATA	ENDS
PUBLIC	std_crc32
pdata	SEGMENT
$pdata$std_crc32 DD imagerel $LN6
	DD	imagerel $LN6+141
	DD	imagerel $unwind$std_crc32
pdata	ENDS
xdata	SEGMENT
$unwind$std_crc32 DD 011301H
	DD	04213H
; Function compile flags: /Odtp
; File d:\projects\crc32_sse\main.c
xdata	ENDS
_TEXT	SEGMENT
crc$ = 0
i$ = 4
buf$ = 8
crc_index$4377 = 16
buffer$ = 48
size$ = 56
prev$ = 64
std_crc32 PROC

; 25   : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 26   : 	u8* buf=(u8*)buffer;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  00018	48 89 44 24 08	 mov	 QWORD PTR buf$[rsp], rax

; 27   : 	u32 crc=prev;

  0001d	8b 44 24 40	 mov	 eax, DWORD PTR prev$[rsp]
  00021	89 04 24	 mov	 DWORD PTR crc$[rsp], eax

; 28   : 	u32 i=0;

  00024	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 29   : 	for(;i<size;i++)

  0002c	eb 0b		 jmp	 SHORT $LN3@std_crc32
$LN2@std_crc32:
  0002e	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 44 24 04	 mov	 DWORD PTR i$[rsp], eax
$LN3@std_crc32:
  00039	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  0003d	48 3b 44 24 38	 cmp	 rax, QWORD PTR size$[rsp]
  00042	73 38		 jae	 SHORT $LN1@std_crc32

; 30   : 	{
; 31   : 		u8 crc_index=(u8)(crc^buf[i]&0xff);

  00044	8b 4c 24 04	 mov	 ecx, DWORD PTR i$[rsp]
  00048	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  0004d	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00051	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00057	8b 04 24	 mov	 eax, DWORD PTR crc$[rsp]
  0005a	33 c1		 xor	 eax, ecx
  0005c	88 44 24 10	 mov	 BYTE PTR crc_index$4377[rsp], al

; 32   : 		crc=crc_table[crc_index]^(crc>>8);

  00060	0f b6 54 24 10	 movzx	 edx, BYTE PTR crc_index$4377[rsp]
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0006c	8b 0c 24	 mov	 ecx, DWORD PTR crc$[rsp]
  0006f	c1 e9 08	 shr	 ecx, 8
  00072	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00075	33 c1		 xor	 eax, ecx
  00077	89 04 24	 mov	 DWORD PTR crc$[rsp], eax

; 33   : 	}

  0007a	eb b2		 jmp	 SHORT $LN2@std_crc32
$LN1@std_crc32:

; 34   : 	crc^=0xffffffff;

  0007c	8b 04 24	 mov	 eax, DWORD PTR crc$[rsp]
  0007f	83 f0 ff	 xor	 eax, -1			; ffffffffH
  00082	89 04 24	 mov	 DWORD PTR crc$[rsp], eax

; 35   : 	return crc;

  00085	8b 04 24	 mov	 eax, DWORD PTR crc$[rsp]

; 36   : }

  00088	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008c	c3		 ret	 0
std_crc32 ENDP
_TEXT	ENDS
PUBLIC	main
EXTRN	system:PROC
EXTRN	scanf_s:PROC
EXTRN	sse_crc32:PROC
EXTRN	strnicmp:PROC
EXTRN	printf:PROC
pdata	SEGMENT
$pdata$main DD	imagerel $LN5
	DD	imagerel $LN5+285
	DD	imagerel $unwind$main
pdata	ENDS
xdata	SEGMENT
$unwind$main DD	040a01H
	DD	087010aH
	DD	060027003H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
string_buf$ = 32
std$4390 = 1040
len$4389 = 1048
sse$4391 = 1056
main	PROC

; 39   : {

$LN5:
  000a0	40 56		 push	 rsi
  000a2	57		 push	 rdi
  000a3	48 81 ec 38 04
	00 00		 sub	 rsp, 1080		; 00000438H

; 40   : 	char string_buf[1000]="Example input";

  000aa	48 8d 7c 24 20	 lea	 rdi, QWORD PTR string_buf$[rsp]
  000af	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:$SG4382
  000b6	b9 0e 00 00 00	 mov	 ecx, 14
  000bb	f3 a4		 rep movsb
  000bd	48 8d 7c 24 2e	 lea	 rdi, QWORD PTR string_buf$[rsp+14]
  000c2	33 c0		 xor	 eax, eax
  000c4	b9 da 03 00 00	 mov	 ecx, 986		; 000003daH
  000c9	f3 aa		 rep stosb

; 41   : 	printf("Type \"exit\" to leave program!\n");

  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4383
  000d2	e8 00 00 00 00	 call	 printf

; 42   : 	printf("Example CRC32 hash of string \"Example input\"\n");

  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4384
  000de	e8 00 00 00 00	 call	 printf
$LN2@main:

; 43   : 	while(strnicmp(string_buf,"exit",_countof(string_buf)))

  000e3	41 b8 e8 03 00
	00		 mov	 r8d, 1000		; 000003e8H
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4388
  000f0	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  000f5	e8 00 00 00 00	 call	 strnicmp
  000fa	85 c0		 test	 eax, eax
  000fc	0f 84 a3 00 00
	00		 je	 $LN1@main

; 44   : 	{
; 45   : 		size_t len=strnlen_s(string_buf,1000);

  00102	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  00107	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  0010c	e8 00 00 00 00	 call	 strnlen_s
  00111	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR len$4389[rsp], rax

; 46   : 		u32 std=std_crc32(string_buf,len,0xffffffff);

  00119	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  0011f	48 8b 94 24 18
	04 00 00	 mov	 rdx, QWORD PTR len$4389[rsp]
  00127	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  0012c	e8 00 00 00 00	 call	 std_crc32
  00131	89 84 24 10 04
	00 00		 mov	 DWORD PTR std$4390[rsp], eax

; 47   : 		u32 sse=sse_crc32(string_buf,len,0xffffffff);

  00138	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  0013e	48 8b 94 24 18
	04 00 00	 mov	 rdx, QWORD PTR len$4389[rsp]
  00146	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  0014b	e8 00 00 00 00	 call	 sse_crc32
  00150	89 84 24 20 04
	00 00		 mov	 DWORD PTR sse$4391[rsp], eax

; 48   : 		printf("Result by Non-Optimized: 0x%X\n",std);

  00157	8b 94 24 10 04
	00 00		 mov	 edx, DWORD PTR std$4390[rsp]
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4392
  00165	e8 00 00 00 00	 call	 printf

; 49   : 		printf("Result by SSE-Optimized: 0x%X\n",sse);

  0016a	8b 94 24 20 04
	00 00		 mov	 edx, DWORD PTR sse$4391[rsp]
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4393
  00178	e8 00 00 00 00	 call	 printf

; 50   : 		printf("Input string to hash: ");

  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4394
  00184	e8 00 00 00 00	 call	 printf

; 51   : 		scanf_s("%s",string_buf,_countof(string_buf));

  00189	41 b8 e8 03 00
	00		 mov	 r8d, 1000		; 000003e8H
  0018f	48 8d 54 24 20	 lea	 rdx, QWORD PTR string_buf$[rsp]
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4395
  0019b	e8 00 00 00 00	 call	 scanf_s

; 52   : 	}

  001a0	e9 3e ff ff ff	 jmp	 $LN2@main
$LN1@main:

; 53   : 	system("pause");

  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4396
  001ac	e8 00 00 00 00	 call	 system

; 54   : }

  001b1	33 c0		 xor	 eax, eax
  001b3	48 81 c4 38 04
	00 00		 add	 rsp, 1080		; 00000438H
  001ba	5f		 pop	 rdi
  001bb	5e		 pop	 rsi
  001bc	c3		 ret	 0
main	ENDP
_TEXT	ENDS
EXTRN	strnlen:PROC
pdata	SEGMENT
$pdata$strnlen_s DD imagerel strnlen_s
	DD	imagerel strnlen_s+34
	DD	imagerel $unwind$strnlen_s
pdata	ENDS
xdata	SEGMENT
$unwind$strnlen_s DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
; File c:\winddk\7600.16385.1\inc\crt\string.h
xdata	ENDS
_TEXT	SEGMENT
_Str$ = 48
_MaxCount$ = 56
strnlen_s PROC

; 81   : {

  001d0	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  001d5	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  001da	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 82   :     return strnlen(_Str, _MaxCount);

  001de	48 8b 54 24 38	 mov	 rdx, QWORD PTR _MaxCount$[rsp]
  001e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Str$[rsp]
  001e8	e8 00 00 00 00	 call	 strnlen

; 83   : }

  001ed	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001f1	c3		 ret	 0
strnlen_s ENDP
_TEXT	ENDS
END
