; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	crc32c_table
_DATA	SEGMENT
$SG4382	DB	'Example', 00H
$SG4383	DB	'Type "exit" to leave program!', 0aH, 00H
	ORG $+1
$SG4384	DB	'Example CRC32 hash of string "Example"', 0aH, 00H
$SG4388	DB	'exit', 00H
	ORG $+3
$SG4392	DB	'Result by Non-Optimized: 0x%X', 0aH, 00H
	ORG $+1
$SG4393	DB	'Result by SSE-Optimized: 0x%X', 0aH, 00H
	ORG $+1
$SG4394	DB	'Input string to hash: ', 00H
	ORG $+1
$SG4395	DB	'%s', 00H
	ORG $+1
$SG4396	DB	'pause', 00H
_DATA	ENDS
CONST	SEGMENT
crc32c_table DD	00H
	DD	0f26b8303H
	DD	0e13b70f7H
	DD	01350f3f4H
	DD	0c79a971fH
	DD	035f1141cH
	DD	026a1e7e8H
	DD	0d4ca64ebH
	DD	08ad958cfH
	DD	078b2dbccH
	DD	06be22838H
	DD	09989ab3bH
	DD	04d43cfd0H
	DD	0bf284cd3H
	DD	0ac78bf27H
	DD	05e133c24H
	DD	0105ec76fH
	DD	0e235446cH
	DD	0f165b798H
	DD	030e349bH
	DD	0d7c45070H
	DD	025afd373H
	DD	036ff2087H
	DD	0c494a384H
	DD	09a879fa0H
	DD	068ec1ca3H
	DD	07bbcef57H
	DD	089d76c54H
	DD	05d1d08bfH
	DD	0af768bbcH
	DD	0bc267848H
	DD	04e4dfb4bH
	DD	020bd8edeH
	DD	0d2d60dddH
	DD	0c186fe29H
	DD	033ed7d2aH
	DD	0e72719c1H
	DD	0154c9ac2H
	DD	061c6936H
	DD	0f477ea35H
	DD	0aa64d611H
	DD	0580f5512H
	DD	04b5fa6e6H
	DD	0b93425e5H
	DD	06dfe410eH
	DD	09f95c20dH
	DD	08cc531f9H
	DD	07eaeb2faH
	DD	030e349b1H
	DD	0c288cab2H
	DD	0d1d83946H
	DD	023b3ba45H
	DD	0f779deaeH
	DD	05125dadH
	DD	01642ae59H
	DD	0e4292d5aH
	DD	0ba3a117eH
	DD	04851927dH
	DD	05b016189H
	DD	0a96ae28aH
	DD	07da08661H
	DD	08fcb0562H
	DD	09c9bf696H
	DD	06ef07595H
	DD	0417b1dbcH
	DD	0b3109ebfH
	DD	0a0406d4bH
	DD	0522bee48H
	DD	086e18aa3H
	DD	0748a09a0H
	DD	067dafa54H
	DD	095b17957H
	DD	0cba24573H
	DD	039c9c670H
	DD	02a993584H
	DD	0d8f2b687H
	DD	0c38d26cH
	DD	0fe53516fH
	DD	0ed03a29bH
	DD	01f682198H
	DD	05125dad3H
	DD	0a34e59d0H
	DD	0b01eaa24H
	DD	042752927H
	DD	096bf4dccH
	DD	064d4cecfH
	DD	077843d3bH
	DD	085efbe38H
	DD	0dbfc821cH
	DD	02997011fH
	DD	03ac7f2ebH
	DD	0c8ac71e8H
	DD	01c661503H
	DD	0ee0d9600H
	DD	0fd5d65f4H
	DD	0f36e6f7H
	DD	061c69362H
	DD	093ad1061H
	DD	080fde395H
	DD	072966096H
	DD	0a65c047dH
	DD	05437877eH
	DD	04767748aH
	DD	0b50cf789H
	DD	0eb1fcbadH
	DD	0197448aeH
	DD	0a24bb5aH
	DD	0f84f3859H
	DD	02c855cb2H
	DD	0deeedfb1H
	DD	0cdbe2c45H
	DD	03fd5af46H
	DD	07198540dH
	DD	083f3d70eH
	DD	090a324faH
	DD	062c8a7f9H
	DD	0b602c312H
	DD	044694011H
	DD	05739b3e5H
	DD	0a55230e6H
	DD	0fb410cc2H
	DD	092a8fc1H
	DD	01a7a7c35H
	DD	0e811ff36H
	DD	03cdb9bddH
	DD	0ceb018deH
	DD	0dde0eb2aH
	DD	02f8b6829H
	DD	082f63b78H
	DD	0709db87bH
	DD	063cd4b8fH
	DD	091a6c88cH
	DD	0456cac67H
	DD	0b7072f64H
	DD	0a457dc90H
	DD	0563c5f93H
	DD	082f63b7H
	DD	0fa44e0b4H
	DD	0e9141340H
	DD	01b7f9043H
	DD	0cfb5f4a8H
	DD	03dde77abH
	DD	02e8e845fH
	DD	0dce5075cH
	DD	092a8fc17H
	DD	060c37f14H
	DD	073938ce0H
	DD	081f80fe3H
	DD	055326b08H
	DD	0a759e80bH
	DD	0b4091bffH
	DD	0466298fcH
	DD	01871a4d8H
	DD	0ea1a27dbH
	DD	0f94ad42fH
	DD	0b21572cH
	DD	0dfeb33c7H
	DD	02d80b0c4H
	DD	03ed04330H
	DD	0ccbbc033H
	DD	0a24bb5a6H
	DD	0502036a5H
	DD	04370c551H
	DD	0b11b4652H
	DD	065d122b9H
	DD	097baa1baH
	DD	084ea524eH
	DD	07681d14dH
	DD	02892ed69H
	DD	0daf96e6aH
	DD	0c9a99d9eH
	DD	03bc21e9dH
	DD	0ef087a76H
	DD	01d63f975H
	DD	0e330a81H
	DD	0fc588982H
	DD	0b21572c9H
	DD	0407ef1caH
	DD	0532e023eH
	DD	0a145813dH
	DD	0758fe5d6H
	DD	087e466d5H
	DD	094b49521H
	DD	066df1622H
	DD	038cc2a06H
	DD	0caa7a905H
	DD	0d9f75af1H
	DD	02b9cd9f2H
	DD	0ff56bd19H
	DD	0d3d3e1aH
	DD	01e6dcdeeH
	DD	0ec064eedH
	DD	0c38d26c4H
	DD	031e6a5c7H
	DD	022b65633H
	DD	0d0ddd530H
	DD	0417b1dbH
	DD	0f67c32d8H
	DD	0e52cc12cH
	DD	01747422fH
	DD	049547e0bH
	DD	0bb3ffd08H
	DD	0a86f0efcH
	DD	05a048dffH
	DD	08ecee914H
	DD	07ca56a17H
	DD	06ff599e3H
	DD	09d9e1ae0H
	DD	0d3d3e1abH
	DD	021b862a8H
	DD	032e8915cH
	DD	0c083125fH
	DD	0144976b4H
	DD	0e622f5b7H
	DD	0f5720643H
	DD	07198540H
	DD	0590ab964H
	DD	0ab613a67H
	DD	0b831c993H
	DD	04a5a4a90H
	DD	09e902e7bH
	DD	06cfbad78H
	DD	07fab5e8cH
	DD	08dc0dd8fH
	DD	0e330a81aH
	DD	0115b2b19H
	DD	020bd8edH
	DD	0f0605beeH
	DD	024aa3f05H
	DD	0d6c1bc06H
	DD	0c5914ff2H
	DD	037faccf1H
	DD	069e9f0d5H
	DD	09b8273d6H
	DD	088d28022H
	DD	07ab90321H
	DD	0ae7367caH
	DD	05c18e4c9H
	DD	04f48173dH
	DD	0bd23943eH
	DD	0f36e6f75H
	DD	0105ec76H
	DD	012551f82H
	DD	0e03e9c81H
	DD	034f4f86aH
	DD	0c69f7b69H
	DD	0d5cf889dH
	DD	027a40b9eH
	DD	079b737baH
	DD	08bdcb4b9H
	DD	0988c474dH
	DD	06ae7c44eH
	DD	0be2da0a5H
	DD	04c4623a6H
	DD	05f16d052H
	DD	0ad7d5351H
CONST	ENDS
PUBLIC	std_crc32
pdata	SEGMENT
$pdata$std_crc32 DD imagerel $LN6
	DD	imagerel $LN6+132
	DD	imagerel $unwind$std_crc32
pdata	ENDS
xdata	SEGMENT
$unwind$std_crc32 DD 011301H
	DD	04213H
; Function compile flags: /Odtp
; File d:\projects\crc32_sse\main.c
xdata	ENDS
_TEXT	SEGMENT
crc$ = 0
i$ = 4
buf$ = 8
crc_index$4377 = 16
buffer$ = 48
size$ = 56
prev$ = 64
std_crc32 PROC

; 25   : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 26   : 	u8* buf=(u8*)buffer;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  00018	48 89 44 24 08	 mov	 QWORD PTR buf$[rsp], rax

; 27   : 	u32 crc=prev;

  0001d	8b 44 24 40	 mov	 eax, DWORD PTR prev$[rsp]
  00021	89 04 24	 mov	 DWORD PTR crc$[rsp], eax

; 28   : 	u32 i=0;

  00024	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 29   : 	for(;i<size;i++)

  0002c	eb 0b		 jmp	 SHORT $LN3@std_crc32
$LN2@std_crc32:
  0002e	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00032	83 c0 01	 add	 eax, 1
  00035	89 44 24 04	 mov	 DWORD PTR i$[rsp], eax
$LN3@std_crc32:
  00039	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  0003d	48 3b 44 24 38	 cmp	 rax, QWORD PTR size$[rsp]
  00042	73 38		 jae	 SHORT $LN1@std_crc32

; 30   : 	{
; 31   : 		u8 crc_index=(u8)(crc^buf[i]&0xff);

  00044	8b 4c 24 04	 mov	 ecx, DWORD PTR i$[rsp]
  00048	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  0004d	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00051	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00057	8b 04 24	 mov	 eax, DWORD PTR crc$[rsp]
  0005a	33 c1		 xor	 eax, ecx
  0005c	88 44 24 10	 mov	 BYTE PTR crc_index$4377[rsp], al

; 32   : 		crc=crc32c_table[crc_index]^(crc>>8);

  00060	0f b6 54 24 10	 movzx	 edx, BYTE PTR crc_index$4377[rsp]
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc32c_table
  0006c	8b 0c 24	 mov	 ecx, DWORD PTR crc$[rsp]
  0006f	c1 e9 08	 shr	 ecx, 8
  00072	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00075	33 c1		 xor	 eax, ecx
  00077	89 04 24	 mov	 DWORD PTR crc$[rsp], eax

; 33   : 	}

  0007a	eb b2		 jmp	 SHORT $LN2@std_crc32
$LN1@std_crc32:

; 34   : 	return crc;

  0007c	8b 04 24	 mov	 eax, DWORD PTR crc$[rsp]

; 35   : }

  0007f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00083	c3		 ret	 0
std_crc32 ENDP
_TEXT	ENDS
PUBLIC	main
EXTRN	system:PROC
EXTRN	scanf_s:PROC
EXTRN	sse_crc32:PROC
EXTRN	strnicmp:PROC
EXTRN	printf:PROC
pdata	SEGMENT
$pdata$main DD	imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$main
pdata	ENDS
xdata	SEGMENT
$unwind$main DD	030901H
	DD	0860109H
	DD	07002H
; Function compile flags: /Odtp
xdata	ENDS
_TEXT	SEGMENT
string_buf$ = 32
std$4390 = 1040
len$4389 = 1048
sse$4391 = 1056
main	PROC

; 38   : {

$LN5:
  00090	40 57		 push	 rdi
  00092	48 81 ec 30 04
	00 00		 sub	 rsp, 1072		; 00000430H

; 39   : 	char string_buf[1000]="Example";

  00099	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR $SG4382
  000a0	48 89 44 24 20	 mov	 QWORD PTR string_buf$[rsp], rax
  000a5	48 8d 7c 24 28	 lea	 rdi, QWORD PTR string_buf$[rsp+8]
  000aa	33 c0		 xor	 eax, eax
  000ac	b9 e0 03 00 00	 mov	 ecx, 992		; 000003e0H
  000b1	f3 aa		 rep stosb

; 40   : 	printf("Type \"exit\" to leave program!\n");

  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4383
  000ba	e8 00 00 00 00	 call	 printf

; 41   : 	printf("Example CRC32 hash of string \"Example\"\n");

  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4384
  000c6	e8 00 00 00 00	 call	 printf
$LN2@main:

; 42   : 	while(strnicmp(string_buf,"exit",_countof(string_buf)))

  000cb	41 b8 e8 03 00
	00		 mov	 r8d, 1000		; 000003e8H
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4388
  000d8	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  000dd	e8 00 00 00 00	 call	 strnicmp
  000e2	85 c0		 test	 eax, eax
  000e4	0f 84 a3 00 00
	00		 je	 $LN1@main

; 43   : 	{
; 44   : 		size_t len=strnlen_s(string_buf,_countof(string_buf));

  000ea	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  000ef	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  000f4	e8 00 00 00 00	 call	 strnlen_s
  000f9	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR len$4389[rsp], rax

; 45   : 		u32 std=std_crc32(string_buf,len,0xffffffff);

  00101	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00107	48 8b 94 24 18
	04 00 00	 mov	 rdx, QWORD PTR len$4389[rsp]
  0010f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  00114	e8 00 00 00 00	 call	 std_crc32
  00119	89 84 24 10 04
	00 00		 mov	 DWORD PTR std$4390[rsp], eax

; 46   : 		u32 sse=sse_crc32(string_buf,len,0xffffffff);

  00120	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00126	48 8b 94 24 18
	04 00 00	 mov	 rdx, QWORD PTR len$4389[rsp]
  0012e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR string_buf$[rsp]
  00133	e8 00 00 00 00	 call	 sse_crc32
  00138	89 84 24 20 04
	00 00		 mov	 DWORD PTR sse$4391[rsp], eax

; 47   : 		printf("Result by Non-Optimized: 0x%X\n",std);

  0013f	8b 94 24 10 04
	00 00		 mov	 edx, DWORD PTR std$4390[rsp]
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4392
  0014d	e8 00 00 00 00	 call	 printf

; 48   : 		printf("Result by SSE-Optimized: 0x%X\n",sse);

  00152	8b 94 24 20 04
	00 00		 mov	 edx, DWORD PTR sse$4391[rsp]
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4393
  00160	e8 00 00 00 00	 call	 printf

; 49   : 		printf("Input string to hash: ");

  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4394
  0016c	e8 00 00 00 00	 call	 printf

; 50   : 		scanf_s("%s",string_buf,_countof(string_buf));

  00171	41 b8 e8 03 00
	00		 mov	 r8d, 1000		; 000003e8H
  00177	48 8d 54 24 20	 lea	 rdx, QWORD PTR string_buf$[rsp]
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4395
  00183	e8 00 00 00 00	 call	 scanf_s

; 51   : 	}

  00188	e9 3e ff ff ff	 jmp	 $LN2@main
$LN1@main:

; 52   : 	system("pause");

  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG4396
  00194	e8 00 00 00 00	 call	 system

; 53   : }

  00199	33 c0		 xor	 eax, eax
  0019b	48 81 c4 30 04
	00 00		 add	 rsp, 1072		; 00000430H
  001a2	5f		 pop	 rdi
  001a3	c3		 ret	 0
main	ENDP
_TEXT	ENDS
EXTRN	strnlen:PROC
pdata	SEGMENT
$pdata$strnlen_s DD imagerel strnlen_s
	DD	imagerel strnlen_s+34
	DD	imagerel $unwind$strnlen_s
pdata	ENDS
xdata	SEGMENT
$unwind$strnlen_s DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
; File c:\winddk\7600.16385.1\inc\crt\string.h
xdata	ENDS
_TEXT	SEGMENT
_Str$ = 48
_MaxCount$ = 56
strnlen_s PROC

; 81   : {

  001b0	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  001b5	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  001ba	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 82   :     return strnlen(_Str, _MaxCount);

  001be	48 8b 54 24 38	 mov	 rdx, QWORD PTR _MaxCount$[rsp]
  001c3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Str$[rsp]
  001c8	e8 00 00 00 00	 call	 strnlen

; 83   : }

  001cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001d1	c3		 ret	 0
strnlen_s ENDP
_TEXT	ENDS
END
